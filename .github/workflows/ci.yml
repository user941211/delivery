name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18.x'

jobs:
  # 코드 품질 검사
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check TypeScript compilation
        run: npm run type-check

  # 백엔드 테스트
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/api
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm test

      - name: Run integration tests
        run: npm run test:integration

      - name: Run performance tests
        run: npm run test:performance

      - name: Run security tests
        run: npm run test:security

      - name: Generate test coverage
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./apps/api/coverage/lcov.info
          flags: backend
          name: backend-coverage

  # 프론트엔드 테스트
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/web
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm test

      - name: Run component tests
        run: npm run test:components

      - name: Run performance tests
        run: npm run test:performance

      - name: Generate test coverage
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./apps/web/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # E2E 테스트
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Start backend server
        run: npm run start:api &
        env:
          NODE_ENV: test

      - name: Start frontend server
        run: npm run start:web &
        env:
          NODE_ENV: test

      - name: Wait for servers to be ready
        run: |
          npx wait-on http://localhost:3001/health
          npx wait-on http://localhost:3000

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload E2E test artifacts
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-screenshots
          path: tests/e2e/screenshots/

  # 보안 스캔
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # 빌드 테스트
  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: [lint-and-format]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build backend
        run: npm run build:api

      - name: Build frontend
        run: npm run build:web

      - name: Test build artifacts
        run: |
          test -d apps/api/dist
          test -d apps/web/.next

  # 품질 게이트
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-scan, build-test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download coverage reports
        uses: actions/download-artifact@v3

      - name: Check coverage thresholds
        run: |
          echo "Checking code coverage thresholds..."
          # Backend coverage check
          if [ -f apps/api/coverage/coverage-summary.json ]; then
            node -e "
              const coverage = require('./apps/api/coverage/coverage-summary.json');
              const threshold = 80;
              const lines = coverage.total.lines.pct;
              console.log('Backend coverage:', lines + '%');
              if (lines < threshold) {
                console.error('Backend coverage below threshold:', threshold + '%');
                process.exit(1);
              }
            "
          fi
          
          # Frontend coverage check
          if [ -f apps/web/coverage/coverage-summary.json ]; then
            node -e "
              const coverage = require('./apps/web/coverage/coverage-summary.json');
              const threshold = 70;
              const lines = coverage.total.lines.pct;
              console.log('Frontend coverage:', lines + '%');
              if (lines < threshold) {
                console.error('Frontend coverage below threshold:', threshold + '%');
                process.exit(1);
              }
            "
          fi

      - name: Check test results
        run: |
          echo "All quality checks passed ✅"
          echo "Ready for deployment 🚀"

  # 배포 (메인 브랜치만)
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [quality-gate, e2e-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://delivery-platform.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build applications
        run: |
          npm run build:api
          npm run build:web

      - name: Deploy to production
        run: |
          echo "Deploying to production..."
          # 실제 배포 명령어가 여기에 들어갑니다
          # 예: Docker 이미지 빌드, 컨테이너 배포, CDN 업로드 등

      - name: Run smoke tests
        run: |
          echo "Running post-deployment smoke tests..."
          # 배포 후 기본 기능 확인 테스트

      - name: Notify deployment success
        run: |
          echo "✅ Deployment completed successfully!"
          # Slack, Discord 등으로 배포 완료 알림 