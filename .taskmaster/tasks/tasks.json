{
  "projectInfo": {
    "name": "배달 플랫폼 개발",
    "description": "고객, 배달 기사, 점주를 연결하는 종합적인 배달 플랫폼",
    "version": "1.0.0",
    "createdAt": "2024-01-01",
    "lastModified": "2024-01-01"
  },
  "tasks": [
    {
      "id": 1,
      "title": "개발 환경 설정",
      "description": "프로젝트 전체 개발 환경 구성 및 모노레포 설정",
      "status": "done",
      "priority": "high",
      "dependencies": [],
      "details": "Yarn Workspaces 기반 모노레포 구조 생성, Docker Compose 설정, 기본 패키지 설치 및 설정 파일 구성",
      "testStrategy": "로컬 개발 환경에서 모든 프로젝트가 정상적으로 빌드되고 실행되는지 확인",
      "phase": "Phase 1",
      "subtasks": [
        {
          "id": 1,
          "title": "모노레포 기본 구조 생성",
          "description": "apps/, packages/, tools/ 폴더를 포함한 기본 디렉토리 구조 생성",
          "details": "배달 플랫폼 모노레포의 핵심 폴더 구조를 생성합니다. apps/ (web, mobile, api), packages/ (shared, ui, database), tools/ (scripts, config)",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 1
        },
        {
          "id": 2,
          "title": "루트 package.json 및 Yarn Workspaces 설정",
          "description": "프로젝트 루트에 package.json 생성 및 Yarn Workspaces 설정",
          "details": "모노레포 관리를 위한 루트 package.json 설정, workspaces 패턴 정의, 공통 dependencies 관리",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 1
        },
        {
          "id": 3,
          "title": "TypeScript 공통 설정",
          "description": "모노레포 전체에서 사용할 TypeScript 설정 파일 구성",
          "details": "tsconfig.json (루트), tsconfig.base.json (공통 설정), 각 앱별 개별 설정 파일",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 1
        },
        {
          "id": 4,
          "title": "ESLint/Prettier 공통 설정",
          "description": "코드 품질 및 포맷팅을 위한 ESLint, Prettier 설정",
          "details": ".eslintrc.js, .prettierrc, .prettierignore 설정 및 공통 규칙 적용",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 1
        },
        {
          "id": 5,
          "title": "빌드 도구 설정 (Turbo)",
          "description": "모노레포 빌드 최적화를 위한 Turbo 설정",
          "details": "turbo.json 설정, 빌드 파이프라인 정의, 캐싱 전략 구성",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 1
        },
        {
          "id": 6,
          "title": "Git 설정 및 .gitignore 구성",
          "description": "Git 저장소 초기화 및 적절한 .gitignore 파일 생성",
          "details": "모노레포에 적합한 .gitignore 설정, node_modules, dist, .env 등 제외 설정",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 1
        },
        {
          "id": 7,
          "title": "환경 변수 템플릿 생성",
          "description": ".env.example 파일 생성 및 필요한 환경 변수 정의",
          "details": "데이터베이스, Supabase, JWT, 결제 API 등 필요한 환경 변수 템플릿 작성",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 1
        }
      ]
    },
    {
      "id": 2,
      "title": "Docker 컨테이너 환경 구성",
      "description": "PostgreSQL, Redis 등 필요한 서비스들의 Docker 환경 설정",
      "status": "done",
      "priority": "high",
      "dependencies": [
        1
      ],
      "details": "docker-compose.yml 작성, PostgreSQL 15+ 컨테이너, Redis 7+ 컨테이너, Adminer 관리 도구 설정",
      "testStrategy": "Docker Compose 실행 후 각 서비스 연결 테스트 및 데이터베이스 접근 확인",
      "phase": "Phase 1"
    },
    {
      "id": 3,
      "title": "Supabase 프로젝트 초기화",
      "description": "Supabase 계정 생성 및 프로젝트 설정, 환경 변수 구성",
      "status": "done",
      "priority": "high",
      "dependencies": [
        2
      ],
      "details": "Supabase 계정 생성, 새 프로젝트 설정, API 키 발급, 환경 변수 설정, 로컬 개발과 연동",
      "testStrategy": "Supabase 연결 테스트 및 기본 API 호출 확인",
      "phase": "Phase 1"
    },
    {
      "id": 4,
      "title": "Next.js 웹 프로젝트 설정",
      "description": "Next.js 14+ App Router 기반 웹 애플리케이션 초기 설정",
      "status": "done",
      "priority": "medium",
      "dependencies": [
        1
      ],
      "details": "Next.js 프로젝트 생성, TypeScript 설정, Tailwind CSS 설정, shadcn/ui 설치, 기본 라우팅 구조 생성",
      "testStrategy": "개발 서버 실행 및 기본 페이지 렌더링 확인",
      "phase": "Phase 1"
    },
    {
      "id": 5,
      "title": "Expo 모바일 프로젝트 설정",
      "description": "Expo React Native 기반 모바일 애플리케이션 초기 설정",
      "status": "done",
      "priority": "medium",
      "dependencies": [
        1
      ],
      "details": "Expo 프로젝트 생성, TypeScript 설정, NativeWind 설정, Expo Router 설정, 기본 네비게이션 구조",
      "testStrategy": "Expo 개발 서버 실행 및 시뮬레이터에서 앱 실행 확인",
      "phase": "Phase 1"
    },
    {
      "id": 6,
      "title": "Nest.js API 서버 설정",
      "description": "Nest.js 백엔드 API 서버 초기 설정 및 기본 구조 생성",
      "status": "done",
      "priority": "high",
      "dependencies": [
        1,
        2
      ],
      "details": "Nest.js 프로젝트 생성, TypeScript 설정, Prisma ORM 설정, 기본 모듈 구조 생성, Swagger 문서화 설정",
      "testStrategy": "API 서버 실행 및 기본 엔드포인트 호출 확인, Swagger 문서 접근 테스트",
      "phase": "Phase 1"
    },
    {
      "id": 7,
      "title": "데이터베이스 스키마 설계",
      "description": "PostgreSQL 기반 핵심 데이터베이스 스키마 설계 및 마이그레이션",
      "status": "done",
      "priority": "high",
      "dependencies": [
        3,
        6
      ],
      "details": "Users, Restaurants, MenuItems, Orders, OrderItems, Drivers, Deliveries, Payments, Reviews 등 핵심 테이블 설계",
      "testStrategy": "마이그레이션 실행 및 테이블 생성 확인, 기본 데이터 삽입/조회 테스트",
      "phase": "Phase 1"
    },
    {
      "id": 8,
      "title": "공통 타입 및 유틸리티 패키지",
      "description": "프론트엔드와 백엔드에서 공유할 타입 정의 및 유틸리티 함수 작성",
      "status": "done",
      "priority": "medium",
      "dependencies": [
        7
      ],
      "details": "TypeScript 인터페이스 정의, 공통 상수, 유틸리티 함수, 유효성 검사 스키마 작성",
      "testStrategy": "타입 검사 및 유틸리티 함수 단위 테스트",
      "phase": "Phase 1"
    },
    {
      "id": 9,
      "title": "사용자 인증 시스템",
      "description": "JWT 기반 사용자 인증 및 권한 관리 시스템 구현",
      "status": "done",
      "priority": "high",
      "dependencies": [
        6,
        7,
        8
      ],
      "details": "회원가입, 로그인, 토큰 갱신, 역할 기반 접근 제어 (Customer, Driver, RestaurantOwner) 구현",
      "testStrategy": "각 역할별 회원가입/로그인 테스트, 토큰 유효성 검증, 권한별 API 접근 테스트",
      "phase": "Phase 2",
      "subtasks": [
        {
          "id": 1,
          "title": "JWT 토큰 서비스 구현",
          "description": "JWT 토큰 생성, 검증, 갱신 기능을 포함한 토큰 서비스 모듈 구현",
          "details": "- JWT 토큰 생성 및 검증 로직\n- 액세스 토큰과 리프레시 토큰 관리\n- 토큰 만료 처리\n- 보안 키 관리",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 9
        },
        {
          "id": 2,
          "title": "회원가입 API 구현",
          "description": "사용자 역할별 회원가입 엔드포인트 및 검증 로직 구현",
          "details": "- 고객, 배달원, 점주 역할별 회원가입 처리\n- 이메일/전화번호 중복 검증\n- 비밀번호 해시화\n- 계정 활성화 프로세스",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 9
        },
        {
          "id": 3,
          "title": "로그인 API 구현",
          "description": "사용자 인증 및 JWT 토큰 발급 로그인 엔드포인트 구현",
          "details": "- 이메일/전화번호 + 비밀번호 인증\n- JWT 토큰 발급\n- 로그인 시도 제한 및 보안 처리\n- 다중 기기 로그인 지원",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 9
        },
        {
          "id": 4,
          "title": "역할 기반 접근 제어 가드",
          "description": "Nest.js 가드를 사용한 역할별 API 접근 권한 관리 시스템 구현",
          "details": "- AuthGuard 및 RolesGuard 구현\n- 고객/배달원/점주 권한 분리\n- 보호된 엔드포인트 설정\n- 권한 검증 데코레이터",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 9
        },
        {
          "id": 5,
          "title": "토큰 갱신 및 로그아웃",
          "description": "리프레시 토큰을 통한 액세스 토큰 갱신 및 안전한 로그아웃 구현",
          "details": "- 리프레시 토큰을 통한 액세스 토큰 갱신\n- 로그아웃 시 토큰 무효화\n- 토큰 블랙리스트 관리\n- 자동 토큰 갱신 로직",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 9
        }
      ]
    },
    {
      "id": 10,
      "title": "사용자 프로필 관리",
      "description": "사용자 정보 등록, 수정, 조회 기능 구현",
      "status": "done",
      "priority": "medium",
      "dependencies": [
        9
      ],
      "details": "개인정보 관리, 프로필 이미지 업로드, 주소 관리, 연락처 관리 기능",
      "testStrategy": "프로필 생성/수정/조회 API 테스트, 이미지 업로드 기능 확인",
      "phase": "Phase 2",
      "subtasks": [
        {
          "id": 1,
          "title": "사용자 프로필 서비스 구현",
          "description": "사용자 프로필 CRUD 기능을 담당하는 서비스 모듈 구현",
          "details": "- 프로필 조회, 수정, 삭제 로직\n- 사용자 정보 검증 및 업데이트\n- 프로필 이미지 관리\n- 개인정보 보호 처리",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 10
        },
        {
          "id": 2,
          "title": "주소 관리 시스템",
          "description": "사용자 배달 주소 등록, 수정, 삭제 및 기본 주소 설정 기능 구현",
          "details": "- 배달 주소 CRUD 기능\n- 기본 주소 설정/변경\n- 주소 검증 및 지오코딩\n- 배달 가능 지역 확인",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 10
        },
        {
          "id": 3,
          "title": "파일 업로드 서비스",
          "description": "프로필 이미지 및 문서 파일 업로드 기능 구현",
          "details": "- 이미지 파일 업로드 및 압축\n- 파일 형식 및 크기 검증\n- Supabase Storage 연동\n- 임시 파일 정리 및 보안 처리",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 10
        },
        {
          "id": 4,
          "title": "프로필 API 엔드포인트",
          "description": "사용자 프로필 관리를 위한 REST API 엔드포인트 구현",
          "details": "- 프로필 조회/수정 API\n- 주소 관리 API\n- 파일 업로드 API\n- API 문서화 및 검증",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 10
        }
      ]
    },
    {
      "id": 11,
      "title": "레스토랑 관리 시스템",
      "description": "점주용 레스토랑 등록 및 관리 기능 구현",
      "status": "done",
      "priority": "high",
      "dependencies": [
        9,
        10
      ],
      "details": "레스토랑 등록, 정보 수정, 영업시간 설정, 카테고리 관리, 이미지 업로드",
      "testStrategy": "레스토랑 CRUD 기능 테스트, 영업시간 로직 검증",
      "phase": "Phase 2",
      "subtasks": [
        {
          "id": 1,
          "title": "레스토랑 데이터 모델 및 서비스 구현",
          "description": "레스토랑 정보 관리를 위한 데이터 모델, DTO, 서비스 로직 구현",
          "details": "- 레스토랑 엔티티 및 인터페이스 정의\\n- 레스토랑 CRUD 서비스 구현\\n- 카테고리 및 영업시간 관리 로직\\n- 데이터 검증 및 비즈니스 로직",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 11
        },
        {
          "id": 2,
          "title": "영업시간 및 카테고리 관리 시스템",
          "description": "레스토랑 영업시간 설정, 카테고리 분류 및 태그 관리 기능",
          "details": "- 요일별 영업시간 설정\\n- 특별 영업일/휴무일 관리\\n- 음식 카테고리 및 태그 시스템\\n- 배달 가능 지역 설정",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 11
        },
        {
          "id": 3,
          "title": "레스토랑 이미지 및 미디어 관리",
          "description": "레스토랑 대표 이미지, 갤러리, 로고 등 미디어 파일 관리 기능",
          "details": "- 레스토랑 대표 이미지 업로드\\n- 갤러리 이미지 관리\\n- 로고 및 브랜딩 이미지\\n- 이미지 최적화 및 리사이징",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 11
        },
        {
          "id": 4,
          "title": "레스토랑 관리 API 엔드포인트",
          "description": "점주용 레스토랑 관리 REST API 엔드포인트 구현",
          "details": "- 레스토랑 등록/수정/조회 API\\n- 영업시간 관리 API\\n- 이미지 업로드 API\\n- 점주 권한 검증 및 보안",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 11
        }
      ]
    },
    {
      "id": 12,
      "title": "메뉴 관리 시스템",
      "description": "레스토랑 메뉴 등록, 수정, 삭제 및 옵션 관리 기능",
      "status": "done",
      "priority": "high",
      "dependencies": [
        11
      ],
      "details": "메뉴 항목 관리, 가격 설정, 옵션 그룹 관리, 메뉴 이미지 업로드, 품절 관리",
      "testStrategy": "메뉴 CRUD 테스트, 옵션 조합 검증, 이미지 업로드 확인",
      "phase": "Phase 2",
      "subtasks": [
        {
          "id": 1,
          "title": "메뉴 아이템 데이터 모델 및 서비스 구현",
          "description": "메뉴 아이템의 기본 CRUD 기능과 데이터 검증 로직 구현",
          "details": "- CreateMenuItemDto, UpdateMenuItemDto 생성\n- MenuItemsService 구현 (생성, 조회, 수정, 삭제)\n- 레스토랑 소유권 확인 및 카테고리 연동\n- 가격 검증 및 상태 관리 (품절, 판매중지 등)",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 12
        },
        {
          "id": 2,
          "title": "메뉴 옵션 그룹 및 옵션 관리 시스템",
          "description": "메뉴 아이템의 옵션 그룹과 개별 옵션 관리 기능 구현",
          "details": "- OptionGroup, MenuOption DTO 생성\n- OptionGroupService, MenuOptionService 구현\n- 옵션 그룹 타입 관리 (단일 선택, 다중 선택)\n- 옵션별 추가 가격 설정 및 재고 관리",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 12
        },
        {
          "id": 3,
          "title": "메뉴 이미지 및 미디어 관리",
          "description": "메뉴 아이템별 이미지 업로드 및 관리 기능",
          "details": "- 메뉴 아이템 이미지 업로드 기능\n- 이미지 리사이징 및 썸네일 생성\n- 메뉴 이미지 갤러리 관리\n- 기존 ImageService와의 연동",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 12
        },
        {
          "id": 4,
          "title": "메뉴 관리 API 엔드포인트",
          "description": "점주용 메뉴 관리 REST API 엔드포인트 구현",
          "details": "- MenuController 구현\n- 메뉴 아이템 CRUD API 엔드포인트\n- 옵션 그룹 및 옵션 관리 API\n- 메뉴 이미지 업로드 API\n- Swagger 문서화 및 요청/응답 검증",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 12
        }
      ]
    },
    {
      "id": 13,
      "title": "고객용 레스토랑 검색",
      "description": "위치 기반 레스토랑 검색 및 필터링 기능 구현",
      "status": "done",
      "priority": "high",
      "dependencies": [
        11,
        12
      ],
      "details": "지역별 검색, 카테고리 필터, 평점 정렬, 거리 계산, 영업 상태 표시",
      "testStrategy": "검색 API 테스트, 필터링 로직 검증, 거리 계산 정확도 확인",
      "phase": "Phase 2",
      "subtasks": [
        {
          "id": 1,
          "title": "검색 및 필터 DTO 구현",
          "description": "레스토랑 검색을 위한 DTO와 필터링 옵션 정의",
          "details": "검색 쿼리, 위치 정보, 카테고리 필터, 가격대 필터, 평점 필터, 거리 필터, 정렬 옵션 등을 포함한 포괄적인 DTO 구현",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 13
        },
        {
          "id": 2,
          "title": "레스토랑 검색 서비스 구현",
          "description": "위치 기반 검색, 필터링, 정렬 로직을 포함한 검색 서비스",
          "details": "지리적 위치 계산, 카테고리 필터링, 가격대 필터링, 평점 기반 정렬, 거리 계산, 영업 상태 확인 등의 핵심 검색 로직 구현",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 13
        },
        {
          "id": 3,
          "title": "검색 결과 응답 DTO 및 포맷팅",
          "description": "검색 결과를 클라이언트에 전달하기 위한 응답 DTO 구현",
          "details": "레스토랑 기본 정보, 거리 정보, 평점, 영업 상태, 대표 이미지, 페이지네이션 정보 등을 포함한 검색 결과 응답 형식 정의",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 13
        },
        {
          "id": 4,
          "title": "검색 API 엔드포인트 구현",
          "description": "고객용 레스토랑 검색 API 엔드포인트 구현",
          "details": "검색 컨트롤러 생성, API 문서화, 에러 핸들링, 성능 최적화를 포함한 완전한 검색 엔드포인트 구현",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 13
        }
      ]
    },
    {
      "id": 14,
      "title": "장바구니 시스템",
      "description": "고객용 장바구니 기능 및 주문 임시 저장",
      "status": "done",
      "priority": "medium",
      "dependencies": [
        12,
        13
      ],
      "details": "장바구니 추가/삭제/수정, 옵션 선택, 수량 조절, 가격 계산, 세션 관리",
      "testStrategy": "장바구니 조작 테스트, 가격 계산 정확도, 세션 유지 확인",
      "phase": "Phase 2",
      "subtasks": [
        {
          "id": 1,
          "title": "장바구니 데이터 모델 및 DTO 구현",
          "description": "장바구니 관련 데이터 구조와 DTO 정의",
          "details": "장바구니 아이템, 메뉴 옵션 선택, 수량, 가격 계산을 위한 데이터 모델과 DTO 구현. 세션 기반 임시 저장과 사용자 인증 시 영구 저장 지원",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 14
        },
        {
          "id": 2,
          "title": "장바구니 서비스 로직 구현",
          "description": "장바구니 핵심 비즈니스 로직 및 가격 계산 엔진",
          "details": "장바구니 아이템 추가/수정/삭제, 옵션 선택 처리, 실시간 가격 계산, 배달비 계산, 할인/프로모션 적용, 재고 검증, 세션 관리 등 핵심 로직 구현",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 14
        },
        {
          "id": 3,
          "title": "세션 및 영구 저장 관리",
          "description": "장바구니 세션 관리와 사용자별 영구 저장 시스템",
          "details": "익명 사용자를 위한 세션 기반 임시 저장, 로그인 사용자를 위한 데이터베이스 영구 저장, 세션-사용자 간 데이터 이전, 장바구니 만료 관리, 동기화 로직",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 14
        },
        {
          "id": 4,
          "title": "장바구니 API 엔드포인트 구현",
          "description": "장바구니 관리를 위한 REST API 엔드포인트",
          "details": "장바구니 조회, 아이템 추가/수정/삭제, 수량 변경, 옵션 수정, 전체 비우기, 주문 전 검증 등의 API 엔드포인트 구현. Swagger 문서화 및 에러 핸들링 포함",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 14
        }
      ]
    },
    {
      "id": 15,
      "title": "주문 생성 시스템",
      "description": "장바구니 기반 주문 생성 및 초기 처리",
      "status": "done",
      "priority": "high",
      "dependencies": [
        14
      ],
      "details": "주문 정보 검증, 주문 생성, 주문 상태 관리, 배달비 계산, 알림 발송",
      "testStrategy": "주문 생성 프로세스 테스트, 가격 계산 검증, 상태 변경 확인",
      "phase": "Phase 2",
      "subtasks": [
        {
          "id": 1,
          "title": "주문 데이터 모델 및 DTO 구현",
          "description": "주문 정보, 주문 아이템, 주문 상태, 배달 정보 등의 DTO 구현",
          "details": "주문 생성 요청 DTO, 주문 응답 DTO, 주문 아이템 DTO, 주문 상태 enum, 배달 정보 DTO, 결제 정보 DTO 등 주문 시스템에 필요한 모든 데이터 구조 정의. TypeScript 타입 안전성과 class-validator를 활용한 검증 규칙 포함",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 15
        },
        {
          "id": 2,
          "title": "주문 서비스 로직 구현",
          "description": "장바구니 검증, 주문 생성, 가격 계산, 재고 차감, 상태 관리",
          "details": "장바구니 데이터 검증, 메뉴 재고 확인, 최종 가격 계산, 주문 데이터 생성, 데이터베이스 저장, 재고 차감, 초기 상태 설정 등의 핵심 비즈니스 로직. 트랜잭션 처리를 통한 데이터 일관성 보장",
          "status": "done",
          "dependencies": [
            "15.1"
          ],
          "parentTaskId": 15
        },
        {
          "id": 3,
          "title": "주문 상태 관리 시스템",
          "description": "주문 상태 변경, 워크플로우, 상태별 비즈니스 로직",
          "details": "주문 상태 전환 워크플로우 정의, 상태별 허용 가능한 액션, 상태 변경 시 비즈니스 로직 실행, 상태 이력 관리, 예외 상황 처리 (취소, 환불 등), 알림 트리거 시점 관리",
          "status": "done",
          "dependencies": [
            "15.2"
          ],
          "parentTaskId": 15
        },
        {
          "id": 4,
          "title": "주문 API 엔드포인트 구현",
          "description": "주문 생성, 조회, 상태 변경 등의 REST API",
          "details": "주문 생성 API, 주문 상세 조회, 주문 목록 조회, 주문 상태 변경, 주문 취소 등의 REST API 엔드포인트 구현. Swagger 문서화, 에러 핸들링, 인증/권한 확인 포함",
          "status": "done",
          "dependencies": [
            "15.3"
          ],
          "parentTaskId": 15
        }
      ]
    },
    {
      "id": 16,
      "title": "기본 결제 시스템",
      "description": "토스페이먼츠 연동을 통한 기본 결제 기능",
      "status": "done",
      "priority": "high",
      "dependencies": [
        15
      ],
      "details": "결제 요청, 결제 승인, 결제 실패 처리, 결제 내역 저장, 환불 처리 기본 구조",
      "testStrategy": "테스트 결제 실행, 성공/실패 시나리오 검증, 결제 내역 확인",
      "phase": "Phase 2",
      "subtasks": [
        {
          "id": 1,
          "title": "결제 DTO 및 인터페이스 정의",
          "description": "토스페이먼츠 API와 결제 프로세스를 위한 DTO 클래스들과 인터페이스 정의",
          "details": "결제 요청 DTO, 결제 승인 DTO, 결제 콜백 DTO, 환불 DTO 등 토스페이먼츠 API 스펙에 맞는 데이터 구조 정의",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 16
        },
        {
          "id": 2,
          "title": "토스페이먼츠 API 연동 서비스",
          "description": "토스페이먼츠 REST API와 연동하는 서비스 로직 구현",
          "details": "결제 요청, 결제 승인, 결제 취소, 환불 등 토스페이먼츠 API 호출 및 응답 처리 로직",
          "status": "done",
          "dependencies": [
            "16.1"
          ],
          "parentTaskId": 16
        },
        {
          "id": 3,
          "title": "결제 프로세스 관리 서비스",
          "description": "결제 상태 관리, 주문과의 연동, 결제 이력 저장 등 비즈니스 로직",
          "details": "결제 상태 추적, 주문 상태 업데이트, 결제 실패 처리, 재결제 로직, 데이터베이스 연동",
          "status": "done",
          "dependencies": [
            "16.2"
          ],
          "parentTaskId": 16
        },
        {
          "id": 4,
          "title": "결제 API 엔드포인트",
          "description": "결제 관련 REST API 엔드포인트 구현",
          "details": "결제 요청, 결제 승인 콜백, 결제 취소, 결제 이력 조회 등 API 컨트롤러 구현",
          "status": "done",
          "dependencies": [
            "16.3"
          ],
          "parentTaskId": 16
        }
      ]
    },
    {
      "id": 17,
      "title": "점주용 주문 관리",
      "description": "점주가 주문을 확인하고 처리할 수 있는 시스템",
      "status": "done",
      "priority": "high",
      "dependencies": [
        15,
        16
      ],
      "details": "주문 접수, 조리 시간 설정, 주문 상태 업데이트, 주문 거부 기능, 특이사항 처리",
      "testStrategy": "주문 처리 워크플로우 테스트, 상태 변경 알림 확인",
      "phase": "Phase 2",
      "subtasks": [
        {
          "id": 1,
          "title": "점주용 주문 관리 DTO 및 인터페이스 정의",
          "description": "점주 전용 주문 관리를 위한 데이터 구조와 인터페이스 정의",
          "details": "점주용 주문 조회 DTO, 주문 상태 업데이트 DTO, 주문 처리 시간 설정 DTO, 주문 거부 DTO, 주문 통계 DTO 등을 정의",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 17
        },
        {
          "id": 2,
          "title": "점주용 주문 처리 서비스",
          "description": "주문 접수, 조리 시간 설정, 상태 업데이트, 거부 처리 등 점주용 비즈니스 로직",
          "details": "점주별 주문 조회, 주문 상태 워크플로우 관리, 조리 시간 추정 및 설정, 주문 거부 및 사유 처리, 주문 통계 집계",
          "status": "done",
          "dependencies": [
            "17.1"
          ],
          "parentTaskId": 17
        },
        {
          "id": 3,
          "title": "점주용 주문 관리 API 컨트롤러",
          "description": "점주 전용 주문 관리 REST API 엔드포인트 구현",
          "details": "점주 인증 기반 주문 조회, 주문 상태 업데이트, 조리 시간 설정, 주문 거부, 주문 통계 조회 등 API 엔드포인트",
          "status": "done",
          "dependencies": [
            "17.2"
          ],
          "parentTaskId": 17
        },
        {
          "id": 4,
          "title": "실시간 주문 알림 시스템",
          "description": "WebSocket을 통한 실시간 주문 접수 및 상태 변경 알림",
          "details": "새 주문 접수 알림, 주문 상태 변경 알림, 결제 상태 변경 알림, 점주별 실시간 구독 관리",
          "status": "done",
          "dependencies": [
            "17.3"
          ],
          "parentTaskId": 17
        }
      ]
    },
    {
      "id": 18,
      "title": "배달기사 등록 시스템",
      "description": "배달기사 신청 및 승인 프로세스 구현",
      "status": "done",
      "priority": "medium",
      "dependencies": [
        9,
        10
      ],
      "details": "배달기사 신청서 작성, 서류 업로드, 승인 프로세스, 차량 정보 등록, 배달 구역 설정",
      "testStrategy": "신청 프로세스 테스트, 서류 업로드 확인, 승인/거부 워크플로우",
      "phase": "Phase 2",
      "subtasks": [
        {
          "id": 1,
          "title": "배달기사 신청 DTO 및 엔티티 정의",
          "description": "배달기사 신청서 작성을 위한 데이터 구조와 데이터베이스 엔티티 정의",
          "details": "배달기사 신청서 DTO, 차량 정보 DTO, 서류 업로드 DTO, 배달기사 엔티티, 차량 엔티티, 배달 구역 엔티티 등을 정의",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 18
        },
        {
          "id": 2,
          "title": "배달기사 신청 서비스",
          "description": "배달기사 신청, 서류 업로드, 상태 관리 등의 비즈니스 로직 구현",
          "details": "신청서 작성, 서류 업로드 처리, 신청 상태 관리, 배달 구역 설정, 차량 정보 관리 등의 서비스 로직",
          "status": "done",
          "dependencies": [
            "18.1"
          ],
          "parentTaskId": 18
        },
        {
          "id": 3,
          "title": "관리자 승인 시스템",
          "description": "관리자가 배달기사 신청을 검토하고 승인/거부할 수 있는 시스템",
          "details": "신청서 검토 인터페이스, 서류 확인, 승인/거부 처리, 거부 사유 관리, 알림 발송 등",
          "status": "done",
          "dependencies": [
            "18.2"
          ],
          "parentTaskId": 18
        },
        {
          "id": 4,
          "title": "배달기사 신청 API 컨트롤러",
          "description": "배달기사 신청 관련 REST API 엔드포인트 구현",
          "details": "신청서 제출, 서류 업로드, 신청 상태 조회, 배달 구역 설정 등의 API 엔드포인트",
          "status": "done",
          "dependencies": [
            "18.2"
          ],
          "parentTaskId": 18
        }
      ]
    },
    {
      "id": 19,
      "title": "기본 배달 배정 시스템",
      "description": "주문과 배달기사 간의 기본적인 매칭 시스템",
      "status": "done",
      "priority": "high",
      "dependencies": [
        17,
        18
      ],
      "details": "거리 기반 배달기사 찾기, 수동 배정, 배달 요청 전송, 수락/거부 처리",
      "testStrategy": "배달기사 매칭 로직 테스트, 요청/응답 처리 확인",
      "phase": "Phase 2",
      "subtasks": [
        {
          "id": 1,
          "title": "배달 요청 DTO 및 엔티티 정의",
          "description": "배달 배정을 위한 데이터 구조 정의",
          "details": "배달 요청, 배달기사 위치, 배정 상태 등의 DTO와 엔티티 정의",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 19
        },
        {
          "id": 2,
          "title": "배달기사 위치 추적 서비스",
          "description": "배달기사의 실시간 위치를 추적하고 관리하는 서비스",
          "details": "배달기사 위치 저장, 업데이트, 조회 기능 및 활성 상태 관리",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 19
        },
        {
          "id": 3,
          "title": "거리 기반 매칭 알고리즘",
          "description": "주문 위치와 배달기사 위치를 기반으로 최적의 매칭을 찾는 알고리즘",
          "details": "Haversine 공식을 사용한 거리 계산, 가까운 배달기사 필터링, 우선순위 정렬",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 19
        },
        {
          "id": 4,
          "title": "배달 요청 관리 서비스",
          "description": "배달 요청 생성, 상태 관리, 배달기사 매칭 및 알림 기능",
          "details": "배달 요청 생성, 배달기사 찾기, 요청 전송, 수락/거부 처리, 상태 업데이트",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 19
        },
        {
          "id": 5,
          "title": "배달 배정 컨트롤러",
          "description": "배달 배정 시스템의 API 엔드포인트 제공",
          "details": "수동 배정, 자동 배정, 요청 상태 조회, 배달기사 응답 처리 등의 REST API",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 19
        }
      ]
    },
    {
      "id": 20,
      "title": "기본 UI/UX 구현 - 웹",
      "description": "Next.js 웹 애플리케이션의 핵심 사용자 인터페이스",
      "status": "done",
      "priority": "medium",
      "dependencies": [
        4,
        9,
        13,
        14,
        15
      ],
      "details": "로그인/회원가입 페이지, 레스토랑 목록, 메뉴 상세, 장바구니, 주문하기 페이지 구현",
      "testStrategy": "사용자 워크플로우 테스트, 반응형 디자인 확인, 접근성 검증",
      "phase": "Phase 2",
      "subtasks": [
        {
          "id": 1,
          "title": "공통 UI 컴포넌트 라이브러리 구축",
          "description": "재사용 가능한 UI 컴포넌트들 (Button, Input, Card, Modal 등) 구현",
          "details": "Tailwind CSS와 Radix UI 기반으로 일관된 디자인 시스템 구축",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 20
        },
        {
          "id": 2,
          "title": "고객용 메인 페이지 및 레스토랑 검색",
          "description": "홈페이지, 레스토랑 검색, 필터링, 카테고리 브라우징 UI 구현",
          "details": "지도 기반 검색, 카테고리별 필터링, 평점/리뷰 표시 기능 포함",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 20
        },
        {
          "id": 3,
          "title": "메뉴 상세 및 주문 페이지",
          "description": "레스토랑 메뉴, 상품 상세, 옵션 선택, 장바구니 UI 구현",
          "details": "메뉴 옵션 선택, 수량 조절, 가격 계산, 장바구니 담기 기능",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 20
        },
        {
          "id": 4,
          "title": "주문 결제 및 주문 추적 페이지",
          "description": "결제 프로세스, 주문 확인, 실시간 주문 상태 추적 UI 구현",
          "details": "결제 수단 선택, 주소 입력, 실시간 상태 업데이트, 배달 추적 지도",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 20
        },
        {
          "id": 5,
          "title": "점주용 레스토랑 관리 대시보드",
          "description": "점주가 레스토랑 정보, 메뉴, 주문을 관리할 수 있는 대시보드 UI",
          "details": "레스토랑 정보 수정, 메뉴 CRUD, 주문 접수/처리, 매출 통계 화면",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 20
        },
        {
          "id": 6,
          "title": "관리자용 플랫폼 관리 페이지",
          "description": "관리자가 전체 플랫폼을 관리할 수 있는 어드민 페이지 UI",
          "details": "사용자 관리, 레스토랑 승인, 주문 모니터링, 시스템 통계 대시보드",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 20
        },
        {
          "id": 7,
          "title": "사용자 계정 및 프로필 관리 페이지",
          "description": "로그인, 회원가입, 프로필 수정, 주문 히스토리 페이지 UI",
          "details": "인증 폼, 프로필 편집, 주소 관리, 주문 내역, 리뷰 관리 화면",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 20
        },
        {
          "id": 8,
          "title": "반응형 디자인 및 UX 최적화",
          "description": "모바일, 태블릿, 데스크톱 대응 반응형 디자인 및 사용성 개선",
          "details": "Breakpoint 설정, 터치 최적화, 로딩 상태, 에러 핸들링, 접근성 개선",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 20
        }
      ]
    },
    {
      "id": 21,
      "title": "기본 UI/UX 구현 - 모바일",
      "description": "Expo 모바일 애플리케이션의 핵심 사용자 인터페이스",
      "status": "done",
      "priority": "medium",
      "dependencies": [
        5,
        9,
        13,
        14,
        15
      ],
      "details": "로그인/회원가입 화면, 레스토랑 목록, 메뉴 상세, 장바구니, 주문하기 화면 구현",
      "testStrategy": "모바일 UX 테스트, 다양한 기기 크기 대응 확인, 터치 인터랙션 검증",
      "phase": "Phase 2"
    },
    {
      "id": 22,
      "title": "실시간 주문 상태 추적",
      "description": "WebSocket 기반 실시간 주문 상태 업데이트 시스템",
      "status": "done",
      "priority": "high",
      "dependencies": [
        6,
        17,
        19
      ],
      "details": "Socket.io 설정, 주문 상태 변경 이벤트 발송, 클라이언트 실시간 업데이트, 연결 관리",
      "testStrategy": "실시간 업데이트 확인, 연결 끊김 처리, 다중 클라이언트 테스트",
      "phase": "Phase 3",
      "subtasks": [
        {
          "id": 1,
          "title": "WebSocket 모듈 설정",
          "description": "Socket.io를 사용한 WebSocket 서버 구성",
          "details": "NestJS에 Socket.io 게이트웨이 모듈 설정, CORS 설정, 의존성 설치",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 22
        },
        {
          "id": 2,
          "title": "실시간 이벤트 DTO 정의",
          "description": "WebSocket 이벤트용 데이터 구조체 정의",
          "details": "주문 상태 변경, 배달기사 위치 업데이트, 알림 메시지 등의 실시간 이벤트 DTO 구현",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 22
        },
        {
          "id": 3,
          "title": "실시간 알림 서비스 구현",
          "description": "WebSocket 이벤트 발송 로직 구현",
          "details": "OrderTrackingGateway와 연동하여 실시간 이벤트를 적절한 사용자들에게 발송하는 서비스 구현",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 22
        },
        {
          "id": 4,
          "title": "기존 시스템과 실시간 기능 통합",
          "description": "배달 시스템과 WebSocket 연동",
          "details": "기존 배달 요청 서비스와 주문 서비스에 실시간 알림 기능을 통합하여 상태 변경 시 자동으로 WebSocket 이벤트가 발송되도록 구현",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 22
        }
      ]
    },
    {
      "id": 23,
      "title": "실시간 위치 추적 시스템",
      "description": "배달기사 위치 실시간 추적 및 고객 공유",
      "status": "done",
      "priority": "high",
      "dependencies": [
        19,
        22
      ],
      "details": "GPS 위치 수집, 실시간 위치 전송, 지도 표시, 예상 도착 시간 계산",
      "testStrategy": "위치 업데이트 정확도, 실시간 전송 확인, 지도 표시 테스트",
      "phase": "Phase 3",
      "subtasks": [
        {
          "id": 1,
          "title": "GPS 위치 수집 API",
          "description": "배달기사 위치 수집 및 저장 시스템",
          "details": "GPS 좌표 수신, 유효성 검증, 데이터베이스 저장, 위치 정확도 관리",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 23
        }
      ]
    },
    {
      "id": 24,
      "title": "채팅 시스템",
      "description": "주문별 고객-점주-배달기사 간 실시간 채팅",
      "status": "done",
      "priority": "medium",
      "dependencies": [
        22
      ],
      "details": "채팅방 생성, 실시간 메시지 전송, 메시지 히스토리, 이미지 전송, 채팅 알림",
      "testStrategy": "실시간 메시지 전송 확인, 메시지 순서 보장, 이미지 업로드 테스트",
      "phase": "Phase 3",
      "subtasks": [
        {
          "id": 1,
          "title": "채팅 DTO 및 엔티티 설계",
          "description": "채팅방, 메시지, 참가자 데이터 구조 정의",
          "details": "채팅방 생성/관리, 메시지 전송/수신, 파일 첨부, 읽음 상태 관리를 위한 DTO와 엔티티 구현",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 24
        },
        {
          "id": 2,
          "title": "채팅룸 관리 서비스",
          "description": "채팅방 생성, 참가자 관리, 설정 관리 서비스 구현",
          "details": "ChatRoomService를 구현하여 채팅방 CRUD, 참가자 추가/제거, 채팅방 설정, 권한 관리 기능을 제공",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 24
        },
        {
          "id": 3,
          "title": "실시간 메시지 서비스",
          "description": "메시지 전송, 수신, 읽음 상태 관리 서비스 구현",
          "details": "MessageService와 ChatGateway를 구현하여 실시간 메시지 전송, 메시지 히스토리 관리, 읽음 상태 추적, 파일 첨부 기능을 제공",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 24
        },
        {
          "id": 4,
          "title": "채팅 컨트롤러 및 모듈 통합",
          "description": "채팅 API 컨트롤러 구현 및 시스템 통합",
          "details": "ChatController 및 ChatModule을 구현하여 REST API 엔드포인트를 제공하고, 기존 시스템과의 통합을 완료",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 24
        }
      ]
    },
    {
      "id": 25,
      "title": "푸시 알림 시스템",
      "description": "주요 이벤트에 대한 모바일/웹 푸시 알림",
      "status": "done",
      "priority": "medium",
      "dependencies": [
        21,
        22
      ],
      "details": "Expo Notifications 설정, FCM 연동, 알림 템플릿, 알림 권한 관리, 알림 설정",
      "testStrategy": "다양한 이벤트 알림 확인, 권한 처리, 알림 클릭 동작 테스트",
      "phase": "Phase 3"
    },
    {
      "id": 26,
      "title": "고급 결제 시스템",
      "description": "다양한 결제 수단 및 할인/쿠폰 시스템",
      "status": "done",
      "priority": "medium",
      "dependencies": [
        16
      ],
      "details": "간편결제 연동, 쿠폰 시스템, 포인트 적립, 부분 환불, 정기 결제 지원",
      "testStrategy": "다양한 결제 방식 테스트, 할인 계산 검증, 환불 프로세스 확인",
      "phase": "Phase 3",
      "subtasks": [
        {
          "id": 1,
          "title": "간편결제 연동 시스템",
          "description": "카카오페이, 토스페이, 네이버페이 등 주요 PG사와의 연동 시스템 구축",
          "details": "PG사별 API 연동, 결제 요청/응답 처리, 결제 상태 관리, 웹훅 처리, 결제 실패 시 재시도 로직",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 26
        },
        {
          "id": 2,
          "title": "쿠폰 및 할인 시스템",
          "description": "쿠폰 생성, 관리, 적용 및 할인 계산 시스템",
          "details": "쿠폰 DTO 설계, 쿠폰 생성/수정/삭제 API, 유효성 검증, 할인 계산 로직, 중복 적용 방지, 사용 내역 추적",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 26
        },
        {
          "id": 3,
          "title": "포인트 적립 및 사용 시스템",
          "description": "주문 시 포인트 적립 및 결제 시 포인트 사용 시스템",
          "details": "포인트 적립 규칙 설정, 포인트 사용 로직, 포인트 내역 관리, 포인트 만료 처리, 포인트 환불 처리",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 26
        },
        {
          "id": 4,
          "title": "부분 환불 및 취소 시스템",
          "description": "주문 취소 및 부분 환불 처리 시스템",
          "details": "환불 요청 처리, 부분 환불 계산, PG사 환불 API 연동, 환불 상태 관리, 환불 내역 추적, 자동 환불 처리",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 26
        },
        {
          "id": 5,
          "title": "정기 결제 및 구독 시스템",
          "description": "정기 주문 및 구독 서비스를 위한 자동 결제 시스템",
          "details": "구독 계획 설정, 정기 결제 스케줄링, 결제 실패 시 재시도, 구독 일시정지/취소, 구독 상태 관리",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 26
        },
        {
          "id": 6,
          "title": "결제 보안 및 로깅 시스템",
          "description": "결제 보안 강화 및 종합적인 로깅/모니터링 시스템",
          "details": "결제 데이터 암호화, 이상 거래 탐지, 결제 로그 관리, 보안 감사, 결제 분석 대시보드, 알림 시스템",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 26
        }
      ]
    },
    {
      "id": 27,
      "title": "리뷰 및 평점 시스템",
      "description": "주문 완료 후 리뷰 작성 및 평점 관리",
      "status": "done",
      "priority": "low",
      "dependencies": [
        15,
        19
      ],
      "details": "리뷰 작성, 평점 등록, 이미지 첨부, 리뷰 신고, 평균 평점 계산",
      "testStrategy": "리뷰 작성 프로세스, 평점 계산 정확도, 이미지 업로드 확인",
      "phase": "Phase 3",
      "subtasks": []
    },
    {
      "id": 28,
      "title": "관리자 대시보드",
      "description": "플랫폼 관리를 위한 관리자 전용 대시보드",
      "status": "done",
      "priority": "low",
      "dependencies": [
        11,
        18,
        27
      ],
      "details": "사용자 관리, 레스토랑 승인, 배달기사 관리, 통계 조회, 신고 처리",
      "testStrategy": "관리 기능 테스트, 통계 정확도, 권한 제어 확인",
      "phase": "Phase 3"
    },
    {
      "id": 29,
      "title": "성능 최적화",
      "description": "시스템 전반적인 성능 최적화 및 병목 제거",
      "status": "done",
      "priority": "medium",
      "dependencies": [
        22,
        23,
        24
      ],
      "details": "데이터베이스 쿼리 최적화, 캐싱 전략, 이미지 최적화, API 응답 시간 개선",
      "testStrategy": "성능 벤치마크, 로드 테스트, 응답 시간 측정",
      "phase": "Phase 4",
      "subtasks": [
        {
          "id": 1,
          "title": "데이터베이스 쿼리 최적화",
          "description": "Supabase 데이터베이스 쿼리 성능 개선 및 인덱스 최적화",
          "details": "N+1 문제 해결, 복합 인덱스 추가, 쿼리 실행 계획 분석, JOIN 최적화, 페이지네이션 개선",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 29
        },
        {
          "id": 2,
          "title": "캐싱 전략 구현",
          "description": "Redis 기반 캐싱 시스템 구현 및 메모리 캐싱 최적화",
          "details": "Redis 캐싱 서버 설정, API 응답 캐싱, 세션 캐싱, 데이터베이스 쿼리 결과 캐싱, 캐시 무효화 전략",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 29
        },
        {
          "id": 3,
          "title": "API 응답 시간 개선",
          "description": "REST API 엔드포인트 응답 속도 최적화 및 병렬 처리 구현",
          "details": "응답 압축 (gzip), 병렬 데이터 처리, 불필요한 데이터 제거, 응답 구조 최적화, 비동기 처리 개선",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 29
        },
        {
          "id": 4,
          "title": "이미지 및 정적 파일 최적화",
          "description": "이미지 압축, CDN 연동, 정적 파일 최적화를 통한 로딩 속도 개선",
          "details": "이미지 자동 압축, WebP 포맷 변환, 레이지 로딩 구현, CDN 설정, 정적 파일 캐싱 헤더 설정",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 29
        },
        {
          "id": 5,
          "title": "코드 성능 최적화",
          "description": "알고리즘 개선, 메모리 사용량 최적화, 코드 리팩토링을 통한 성능 향상",
          "details": "중복 코드 제거, 알고리즘 복잡도 개선, 메모리 누수 방지, 불필요한 연산 제거, 효율적인 데이터 구조 사용",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 29
        },
        {
          "id": 6,
          "title": "성능 모니터링 도구 구현",
          "description": "성능 지표 수집, 모니터링 대시보드, 알람 시스템 구현",
          "details": "응답 시간 측정, 처리량 모니터링, 에러율 추적, 성능 대시보드 구축, 임계값 기반 알람 설정",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 29
        }
      ]
    },
    {
      "id": 30,
      "title": "배포 환경 구성",
      "description": "프로덕션 배포를 위한 인프라 설정",
      "status": "done",
      "priority": "high",
      "dependencies": [
        29
      ],
      "details": "CI/CD 파이프라인, Docker 이미지 빌드, 환경별 설정, 도메인 연결, SSL 인증서",
      "testStrategy": "배포 프로세스 테스트, 환경별 동작 확인, SSL 연결 검증",
      "phase": "Phase 4",
      "subtasks": [
        {
          "id": 1,
          "title": "Docker 컨테이너화",
          "description": "API, 웹, 모바일 앱을 위한 Docker 이미지 생성 및 최적화",
          "details": "Dockerfile 작성, 멀티스테이지 빌드, 이미지 최적화, Docker Compose 설정",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 30
        },
        {
          "id": 2,
          "title": "CI/CD 파이프라인 구성",
          "description": "GitHub Actions 또는 GitLab CI를 활용한 자동 빌드 및 배포 파이프라인",
          "details": "자동 테스트, 빌드, 배포 스크립트 작성, 환경별 배포 전략",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 30
        },
        {
          "id": 3,
          "title": "환경 설정 관리",
          "description": "개발, 스테이징, 프로덕션 환경별 설정 파일 및 환경 변수 관리",
          "details": "환경별 .env 파일, 보안 정보 관리, 환경 분리 전략",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 30
        },
        {
          "id": 4,
          "title": "클라우드 인프라 설정",
          "description": "AWS, GCP, Azure 등 클라우드 플랫폼에서의 서버 인프라 구성",
          "details": "컴퓨팅 인스턴스, 로드밸런서, 데이터베이스, 스토리지 설정",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 30
        },
        {
          "id": 5,
          "title": "도메인 및 SSL 인증서 설정",
          "description": "도메인 연결, SSL 인증서 설치 및 HTTPS 설정",
          "details": "도메인 DNS 설정, Let's Encrypt 또는 유료 SSL 인증서, 리다이렉션 설정",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 30
        },
        {
          "id": 6,
          "title": "배포 자동화 및 모니터링",
          "description": "배포 프로세스 자동화, 롤백 전략, 기본 모니터링 설정",
          "details": "무중단 배포, 헬스체크, 배포 롤백, 로그 수집, 기본 알림 설정",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 30
        }
      ]
    },
    {
      "id": 31,
      "title": "보안 강화",
      "description": "프로덕션 환경 보안 설정 및 취약점 점검",
      "status": "done",
      "priority": "high",
      "dependencies": [
        30
      ],
      "details": "HTTPS 강제, Rate Limiting, SQL Injection 방어, XSS 방어, 민감 정보 암호화",
      "testStrategy": "보안 스캔, 취약점 테스트, 암호화 확인",
      "phase": "Phase 4"
    },
    {
      "id": 32,
      "title": "모니터링 시스템",
      "description": "시스템 모니터링 및 로깅 설정",
      "status": "done",
      "priority": "medium",
      "dependencies": [
        30,
        31
      ],
      "details": "에러 추적, 성능 모니터링, 로그 수집, 알림 설정, 대시보드 구성",
      "testStrategy": "모니터링 데이터 수집 확인, 알림 발송 테스트, 대시보드 동작 검증",
      "phase": "Phase 4"
    },
    {
      "id": 33,
      "title": "테스트 및 QA",
      "description": "종합적인 테스트 및 품질 보증",
      "status": "pending",
      "priority": "high",
      "dependencies": [
        31,
        32
      ],
      "details": "단위 테스트, 통합 테스트, E2E 테스트, 사용자 수용 테스트, 성능 테스트",
      "testStrategy": "전체 시스템 종합 테스트, 사용자 시나리오 검증, 버그 리포트 및 수정",
      "phase": "Phase 4",
      "subtasks": [
        {
          "id": 1,
          "title": "백엔드 단위 테스트 구현",
          "description": "Nest.js API 서비스, 컨트롤러, 모듈별 단위 테스트 구현",
          "details": "- 각 서비스 클래스별 단위 테스트 작성\\n- 컨트롤러 엔드포인트 테스트\\n- 모킹 및 의존성 주입 테스트\\n- Jest 테스트 프레임워크 활용\\n- 테스트 커버리지 80% 이상 달성",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 33
        },
        {
          "id": 2,
          "title": "프론트엔드 단위 테스트 구현",
          "description": "React 컴포넌트, 훅, 유틸리티 함수 테스트 구현",
          "details": "- React 컴포넌트 렌더링 및 상호작용 테스트\\n- 커스텀 훅 테스트\\n- 유틸리티 함수 단위 테스트\\n- React Testing Library 및 Jest 활용\\n- 스냅샷 테스트 포함",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 33
        },
        {
          "id": 3,
          "title": "API 통합 테스트 구현",
          "description": "전체 API 엔드포인트 통합 테스트 및 데이터 플로우 검증",
          "details": "- REST API 엔드포인트별 통합 테스트\\n- 데이터베이스 연동 테스트\\n- 실시간 통신 (WebSocket) 테스트\\n- 에러 핸들링 및 응답 검증\\n- Supertest 및 Jest 활용",
          "status": "done",
          "dependencies": [
            "33.1"
          ],
          "parentTaskId": 33
        },
        {
          "id": 4,
          "title": "E2E 테스트 구현",
          "description": "웹 및 모바일 앱의 전체 사용자 플로우 테스트",
          "details": "- 주요 사용자 시나리오 E2E 테스트\\n- 주문 프로세스 전체 플로우 테스트\\n- 웹앱 Playwright/Cypress 테스트\\n- 모바일앱 Detox 테스트\\n- 크로스 브라우저 테스트",
          "status": "pending",
          "dependencies": [
            "33.2",
            "33.3"
          ],
          "parentTaskId": 33
        },
        {
          "id": 5,
          "title": "성능 테스트 및 최적화",
          "description": "로드 테스트, 응답 시간 측정, 병목 지점 식별 및 개선",
          "details": "- API 응답 시간 성능 테스트\\n- 동시 사용자 로드 테스트\\n- 데이터베이스 쿼리 성능 분석\\n- 프론트엔드 렌더링 성능 측정\\n- Artillery, K6, Lighthouse 활용",
          "status": "done",
          "dependencies": [
            "33.3"
          ],
          "parentTaskId": 33
        },
        {
          "id": 6,
          "title": "보안 테스트 및 취약점 점검",
          "description": "인증/권한, API 보안, 데이터 보호 검증",
          "details": "- JWT 토큰 보안 검증\\n- API 권한 및 접근 제어 테스트\\n- SQL 인젝션 및 XSS 취약점 점검\\n- 개인정보 보호 및 데이터 암호화 검증\\n- OWASP 보안 가이드라인 준수 확인",
          "status": "done",
          "dependencies": [
            "33.3"
          ],
          "parentTaskId": 33
        },
        {
          "id": 7,
          "title": "사용자 수용 테스트 (UAT)",
          "description": "실제 사용자 시나리오 기반 테스트 및 피드백 수집",
          "details": "- 실제 사용자 시나리오 기반 테스트 계획 수립\\n- 고객, 점주, 배달기사 역할별 UAT 수행\\n- 사용성 및 UX 개선점 식별\\n- 버그 리포트 및 개선사항 문서화\\n- 실제 데이터를 활용한 테스트",
          "status": "pending",
          "dependencies": [
            "33.4"
          ],
          "parentTaskId": 33
        },
        {
          "id": 8,
          "title": "테스트 자동화 및 CI/CD 통합",
          "description": "테스트 스위트 자동화 및 지속적인 품질 관리 시스템 구축",
          "details": "- GitHub Actions CI/CD 파이프라인 테스트 통합\\n- 자동화된 테스트 실행 및 리포팅\\n- 코드 커버리지 측정 및 품질 게이트 설정\\n- 테스트 결과 대시보드 구축\\n- 지속적인 품질 모니터링 체계 구축",
          "status": "done",
          "dependencies": [
            "33.5",
            "33.6",
            "33.7"
          ],
          "parentTaskId": 33
        }
      ]
    }
  ]
}