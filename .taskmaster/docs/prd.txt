# 배달 플랫폼 개발 PRD (Product Requirements Document)

## 프로젝트 개요
고객, 배달 기사, 점주를 연결하는 종합적인 배달 플랫폼 개발

## 핵심 목표
- 직관적이고 사용하기 쉬운 3개 역할별 인터페이스 제공
- 실시간 주문 추적 및 위치 기반 서비스
- 안정적인 결제 시스템 및 수수료 관리
- 확장 가능한 모노레포 기반 아키텍처

## 기술 스택 (확정)
### 프론트엔드
- 웹: Next.js 14+ (App Router) + TypeScript + Tailwind CSS
- 모바일: Expo (React Native) + TypeScript + NativeWind
- 상태관리: Zustand + React Query (TanStack Query)

### 백엔드
- API 서버: Nest.js 10+ + TypeScript
- 데이터베이스: PostgreSQL 15+ (Supabase 호스팅)
- ORM: Prisma (1차 선택, TypeORM 대안)
- 캐시/큐: Redis 7+
- 실시간: Socket.io + Supabase Realtime

### 인프라 및 서비스
- BaaS: Supabase (인증, 실시간, 스토리지)
- 결제: 토스페이먼츠 또는 아임포트
- 지도: Naver Maps 또는 Google Maps API
- 배포: Vercel/AWS/자체서버 (Phase 4에서 결정)

## 사용자 역할 및 기능

### 1. 고객 (Customer)
#### 핵심 기능
- 회원가입/로그인 (이메일, 소셜 로그인)
- 레스토랑 검색 및 필터링 (위치, 카테고리, 평점)
- 메뉴 조회 및 옵션 선택
- 장바구니 관리 및 주문 생성
- 다양한 결제 수단 (카드, 계좌이체, 간편결제)
- 실시간 주문 상태 추적
- 배달 위치 실시간 추적
- 주문 내역 조회
- 리뷰 작성 및 평점 등록
- 채팅을 통한 소통 (점주, 배달기사)

#### UI/UX 요구사항
- 모바일 우선 반응형 디자인
- 3번 클릭 내 주문 완료
- 직관적인 네비게이션
- 실시간 알림 (주문 상태, 배달 진행)

### 2. 점주 (Restaurant Owner)
#### 핵심 기능
- 레스토랑 등록 및 프로필 관리
- 메뉴 관리 (등록, 수정, 삭제, 가격 설정)
- 카테고리 및 옵션 관리
- 영업시간 및 휴무일 설정
- 주문 접수 및 처리
- 주문 상태 관리 (접수, 조리중, 준비완료)
- 배달기사 배정 확인
- 매출 통계 및 정산 관리
- 고객 리뷰 관리 및 응답
- 채팅을 통한 고객/배달기사 소통

#### 관리 기능
- 실시간 주문 대시보드
- 일/주/월 매출 통계
- 인기 메뉴 분석
- 고객 피드백 관리

### 3. 배달기사 (Delivery Driver)
#### 핵심 기능
- 배달기사 등록 및 승인 프로세스
- 근무 상태 설정 (온라인/오프라인)
- 배달 요청 수신 및 수락/거부
- 최적 배달 경로 안내
- 픽업 확인 및 배달 시작
- 실시간 위치 공유
- 배달 완료 처리
- 수익 관리 및 정산 내역
- 채팅을 통한 고객/점주 소통

#### 효율성 기능
- 배달 구역 설정
- 수익 최적화 알고리즘
- 배달 내역 관리
- 평점 및 피드백 관리

## 시스템 아키텍처

### 모노레포 구조
```
delivery-platform/
├── apps/
│   ├── web/          # Next.js 웹 애플리케이션
│   ├── mobile/       # Expo 모바일 앱
│   └── api/          # Nest.js 백엔드 API
├── packages/
│   ├── shared/       # 공통 타입 및 유틸리티
│   ├── ui/           # 공용 UI 컴포넌트
│   └── database/     # 데이터베이스 스키마
└── tools/
    ├── scripts/      # 빌드 및 배포 스크립트
    └── config/       # 공통 설정
```

### 핵심 데이터베이스 스키마
- Users: 통합 사용자 테이블 (role 기반 구분)
- Restaurants: 레스토랑 정보
- MenuItems: 메뉴 아이템 및 옵션
- Orders: 주문 정보
- OrderItems: 주문 상세 아이템
- Drivers: 배달기사 정보
- Deliveries: 배달 정보 및 추적
- Payments: 결제 정보
- Reviews: 리뷰 및 평점
- ChatRooms: 채팅방
- ChatMessages: 채팅 메시지
- DeliveryTracking: 실시간 위치 추적

## 실시간 기능 요구사항

### 주문 상태 실시간 업데이트
- 주문 생성 → 점주 알림
- 주문 수락 → 고객 알림
- 조리 시작/완료 → 고객/배달기사 알림
- 배달 시작 → 고객 알림
- 배달 완료 → 모든 당사자 알림

### 위치 추적
- 배달기사 실시간 위치 업데이트 (10초 간격)
- 고객용 배달 추적 지도
- 예상 도착 시간 계산 및 업데이트

### 채팅 시스템
- 주문별 그룹 채팅 (고객-점주-배달기사)
- 실시간 메시지 전송/수신
- 메시지 히스토리 저장
- 푸시 알림 연동

## 결제 시스템

### 결제 수단
- 신용카드/체크카드
- 계좌이체
- 간편결제 (토스페이, 카카오페이 등)
- 포인트/쿠폰 적용

### 수수료 구조 (설정 기반)
```typescript
// 환경 변수로 관리
BASE_DELIVERY_FEE: 3000원 (기본 배달비)
DISTANCE_RATE: 500원/km (거리당 추가)
PLATFORM_FEE_RATE: 5% (플랫폼 수수료)
DRIVER_COMMISSION_RATE: 70% (배달기사 수수료)
```

### 정산 시스템
- 일일 정산 (점주)
- 주간 정산 (배달기사)
- 자동 세금 계산
- 정산 내역 투명성

## 성능 요구사항

### 응답 시간
- API 응답 시간: 평균 500ms 이하
- 페이지 로딩 시간: 3초 이하
- 실시간 업데이트 지연: 1초 이하

### 가용성
- 시스템 가동률: 99.9% 이상
- 데이터베이스 백업: 일일 자동 백업
- 장애 복구 시간: 1시간 이내

### 확장성
- 동시 사용자: 1만명 이상 지원
- 주문 처리량: 초당 100건 이상
- 데이터베이스 확장 가능

## 보안 요구사항

### 인증 및 권한
- JWT 기반 토큰 인증
- 역할 기반 접근 제어 (RBAC)
- 세션 관리 및 토큰 갱신
- 비밀번호 정책 강화

### 데이터 보호
- 개인정보 암호화 저장
- HTTPS 통신 강제
- SQL Injection 방지
- XSS 공격 방지
- CORS 정책 적용

### 결제 보안
- PCI DSS 준수
- 결제 정보 토큰화
- 이중 인증 지원
- 부정 거래 탐지

## 개발 단계별 계획

### Phase 1: 기반 구축 (1-2주)
- 개발 환경 설정
- 모노레포 구조 생성
- 데이터베이스 스키마 설계
- 기본 인증 시스템
- Supabase 연동

### Phase 2: MVP 핵심 기능 (3-4주)
- 사용자 관리 시스템
- 레스토랑/메뉴 관리
- 기본 주문 시스템
- 기초 UI/UX 구현
- 기본 결제 연동

### Phase 3: 고급 기능 (4-6주)
- 실시간 위치 추적
- 채팅 시스템
- 배달 관리 시스템
- 푸시 알림
- 고급 UI/UX

### Phase 4: 배포 및 최적화 (2-3주)
- 배포 환경 구성
- 성능 최적화
- 보안 강화
- 테스트 및 QA
- 모니터링 시스템

## 성공 기준

### 기능적 요구사항
- 모든 핵심 사용자 여정 완성도 100%
- 3개 역할 간 원활한 상호작용
- 실시간 기능 정상 동작
- 결제 시스템 안정성

### 비기능적 요구사항
- 시스템 성능 목표 달성
- 보안 요구사항 충족
- 사용자 경험 만족도 4.5/5.0 이상
- 코드 품질 및 유지보수성

## 위험 요소 및 대응

### 기술적 위험
- 실시간 기능 성능 이슈 → Redis 클러스터링
- 결제 연동 복잡성 → 단계적 구현
- 데이터베이스 병목 → 쿼리 최적화

### 비즈니스 위험
- 사용자 채택률 → 베타 테스트 강화
- 수수료 구조 → 시장 조사 기반 조정
- 경쟁사 대응 → 차별화 기능 개발 