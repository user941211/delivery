# 배달 플랫폼 Docker Compose 설정
version: '3.8'

services:
  # PostgreSQL 데이터베이스 (개발/테스트용)
  postgres:
    image: postgres:15-alpine
    container_name: delivery-postgres
    environment:
      POSTGRES_DB: delivery_platform
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - delivery-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 캐시 서버
  redis:
    image: redis:7-alpine
    container_name: delivery-redis
    command: redis-server --appendonly yes --requirepass redispassword
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - delivery-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # API 서버
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
      target: production
    container_name: delivery-api
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/delivery_platform
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=redispassword
      - JWT_SECRET=your-jwt-secret-key
      - JWT_REFRESH_SECRET=your-jwt-refresh-secret-key
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - delivery-network
    restart: unless-stopped
    volumes:
      - api_logs:/app/logs
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 웹 애플리케이션
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
      target: runner
    container_name: delivery-web
    environment:
      - NODE_ENV=production
      - PORT=3001
      - NEXT_PUBLIC_API_URL=http://api:3000
      - NEXTAUTH_SECRET=your-nextauth-secret
      - NEXTAUTH_URL=http://localhost:3001
    ports:
      - "3001:3001"
    depends_on:
      - api
    networks:
      - delivery-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx 리버스 프록시 (프로덕션용)
  nginx:
    image: nginx:alpine
    container_name: delivery-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/ssl/certs:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - api
      - web
    networks:
      - delivery-network
    restart: unless-stopped

  # 모니터링: Prometheus (선택사항)
  prometheus:
    image: prom/prometheus:latest
    container_name: delivery-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - delivery-network
    restart: unless-stopped
    profiles:
      - monitoring

  # 모니터링: Grafana (선택사항)
  grafana:
    image: grafana/grafana:latest
    container_name: delivery-grafana
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - delivery-network
    restart: unless-stopped
    profiles:
      - monitoring

# 네트워크 설정
networks:
  delivery-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 볼륨 설정
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  api_logs:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local 